apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "birthday-api.fullname" . }}
  labels:
    {{- include "birthday-api.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.app.replicas }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "birthday-api.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "birthday-api.selectorLabels" . | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum | trunc 63 }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "birthday-api.serviceAccountName" . }}
      {{- end }}

      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        {{- if .Values.database.migration.enabled }}
        - name: db-migration
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - "/bin/bash"
            - "-c"
            - |
              echo "Waiting for Cloud SQL Proxy to be ready..."
              until nc -z 127.0.0.1 5432; do
                echo "Cloud SQL Proxy is not ready yet. Waiting..."
                sleep 2
              done
              
              echo "Cloud SQL Proxy is ready!"
              
              echo "Waiting for database to be ready..."
              until pg_isready -h 127.0.0.1 -p 5432 -U {{ .Values.database.user }} -d {{ .Values.database.name }}; do
                echo "Database is not ready yet. Waiting..."
                sleep 2
              done
              
              echo "Database is ready!"
              
              echo "Checking database migration status..."
              CURRENT_REVISION=$(alembic current 2>/dev/null | head -n1 | cut -d' ' -f1 || echo "None")
              HEAD_REVISION=$(alembic heads 2>/dev/null | head -n1 | cut -d' ' -f1 || echo "None")
              
              if [ "$CURRENT_REVISION" = "$HEAD_REVISION" ] && [ "$CURRENT_REVISION" != "None" ]; then
                echo "Database is up to date (revision: $CURRENT_REVISION)"
              else
                echo "Running database migrations..."
                alembic upgrade head
                echo "Migrations completed!"
              fi
              
              echo "Database initialization completed!"
              sleep infinity
          env:
            {{- range .Values.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
            {{- if .Values.externalSecrets.enabled }}
            # Use secrets from External Secrets Operator
            {{- range .Values.secretEnv }}
            - name: {{ .name }}
              valueFrom:
                {{- toYaml .valueFrom | nindent 16 }}
            {{- end }}
            {{- else }}
            # Use default values when External Secrets is disabled
            - name: DATABASE_PASSWORD
              value: "default-password-change-me"
            - name: SECRET_KEY
              value: "default-secret-key-change-me"
            {{- end }}
            - name: DATABASE_ENGINE
              value: "postgresql"
            - name: DATABASE_NAME
              value: {{ .Values.database.name | quote }}
            - name: DATABASE_USER
              value: {{ .Values.database.user | quote }}
            - name: DATABASE_HOST
              value: "127.0.0.1"
            - name: DATABASE_PORT
              value: "5432"
          {{- if .Values.configMap.enabled }}
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
          {{- end }}
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
        {{- end }}
        - name: {{ .Chart.Name }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.app.port }}
              protocol: TCP
          env:
            {{- range .Values.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
            {{- if .Values.externalSecrets.enabled }}
            # Use secrets from External Secrets Operator
            {{- range .Values.secretEnv }}
            - name: {{ .name }}
              valueFrom:
                {{- toYaml .valueFrom | nindent 16 }}
            {{- end }}
            {{- else }}
            # Use default values when External Secrets is disabled
            - name: DATABASE_PASSWORD
              value: "default-password-change-me"
            - name: SECRET_KEY
              value: "default-secret-key-change-me"
            {{- end }}
            - name: DATABASE_ENGINE
              value: "postgresql"
            - name: DATABASE_NAME
              value: {{ .Values.database.name | quote }}
            - name: DATABASE_USER
              value: {{ .Values.database.user | quote }}
            - name: DATABASE_HOST
              value: "127.0.0.1"
            - name: DATABASE_PORT
              value: "5432"
          {{- if .Values.configMap.enabled }}
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if .Values.healthCheck.enabled }}
          startupProbe:
            httpGet:
              path: {{ .Values.healthCheck.path }}
              port: http
            initialDelaySeconds: {{ .Values.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthCheck.timeoutSeconds }}
            failureThreshold: {{ .Values.healthCheck.failureThreshold }}
            successThreshold: {{ .Values.healthCheck.successThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: http
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}

          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: http
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
        {{- if .Values.database.cloudSqlProxy.enabled }}
        - name: cloud-sql-proxy
          image: "gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.8.1"
          command:
            - "/cloud-sql-proxy"
            - "{{ .Values.database.connectionName }}"
            - "--port=5432"
            - "--address=127.0.0.1"
            - "--private-ip"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
          resources:
            requests:
              memory: "16Mi"
              cpu: "10m"
            limits:
              memory: "128Mi"
              cpu: "200m"
        {{- end }}
      {{- if .Values.configMap.enabled }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ include "birthday-api.fullname" . }}-config
      {{- end }}

      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.image.pullSecrets | nindent 8 }}
      {{- end }}
